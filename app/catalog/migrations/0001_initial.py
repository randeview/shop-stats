# Generated by Django 4.2.24 on 2025-09-18 15:36

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Category",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=200, verbose_name="name")),
                ("slug", models.SlugField(max_length=200, verbose_name="slug")),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="catalog.category",
                        verbose_name="parent",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "ordering": ["parent__id", "name"],
            },
        ),
        migrations.CreateModel(
            name="Product",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="name")),
                (
                    "slug",
                    models.SlugField(max_length=255, unique=True, verbose_name="slug"),
                ),
                (
                    "photo_url",
                    models.URLField(
                        blank=True, max_length=1000, verbose_name="photo URL"
                    ),
                ),
                (
                    "absolute_position",
                    models.PositiveIntegerField(
                        default=0,
                        help_text="Smaller number shows first",
                        verbose_name="absolute position",
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="price",
                    ),
                ),
                (
                    "sellers_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="sellers (count)"
                    ),
                ),
                (
                    "sales_30d",
                    models.PositiveIntegerField(
                        default=0, verbose_name="sales last 30 days"
                    ),
                ),
                (
                    "reviews_count",
                    models.PositiveIntegerField(
                        default=0, verbose_name="reviews (count)"
                    ),
                ),
                (
                    "rating",
                    models.DecimalField(
                        decimal_places=1,
                        default=0,
                        help_text="Max 5.0",
                        max_digits=2,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(5),
                        ],
                        verbose_name="rating",
                    ),
                ),
                (
                    "weight_kg",
                    models.DecimalField(
                        decimal_places=3,
                        default=0,
                        max_digits=6,
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="weight (kg)",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(auto_now_add=True, verbose_name="created at"),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="updated at"),
                ),
                (
                    "category",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="products",
                        to="catalog.category",
                        verbose_name="category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Product",
                "verbose_name_plural": "Products",
                "ordering": ["absolute_position", "id"],
                "indexes": [
                    models.Index(
                        fields=["category", "absolute_position"],
                        name="catalog_pro_categor_a83c02_idx",
                    ),
                    models.Index(fields=["name"], name="catalog_pro_name_f603c0_idx"),
                    models.Index(
                        fields=["-sales_30d"], name="catalog_pro_sales_3_011f53_idx"
                    ),
                    models.Index(
                        fields=["-rating"], name="catalog_pro_rating_460c72_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(
                fields=["parent", "slug"], name="catalog_cat_parent__b1fc01_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="category",
            index=models.Index(fields=["name"], name="catalog_cat_name_39f70b_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="category",
            unique_together={("parent", "slug")},
        ),
    ]
